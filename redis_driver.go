package glock

import (
	"time"

	"github.com/garyburd/redigo/redis"
)

const (
	releaseScriptText = `
if redis.call("get", KEYS[1]) == ARGV[1] then
  redis.call("del",KEYS[1])
	return 1
end
return 0
`
	refreshScriptText = `
if redis.call("get", KEYS[1]) == ARGV[1] then
  redis.call("set", KEYS[1], ARGV[1], "PX", ARGV[2])
	return 1
end
return 0
`
	defaultNS = "glock"
)

var (
	releaseScript = redis.NewScript(1, releaseScriptText)
	refreshScript = redis.NewScript(1, refreshScriptText)
)

// DialFunc is a function prototype that matches redigo/redis.Dial signature.
type DialFunc func(network, address string, options ...redis.DialOption) (redis.Conn, error)

// RedisLockOptions represent options to connect to redis
type RedisLockOptions struct {
	// Network, i.e. 'tcp'
	Network string
	// Address, i.e. 'localhost:6379'
	Address string
	// ClientID is the current client ID. If not set, it will be autogenerated
	ClientID string
	// Namespace is an optional namespace for all redis keys that will be created.
	Namespace string
	// A list of redigo/redis.DialOption to be used when connecting to redis
	DialOptions []redis.DialOption
	// The function used to connect to redis. defaults to redigo/redis.Dial
	DialFunc DialFunc
}

// RedisLockClient implements the Client interface to manage locks in redis
type RedisLockClient struct {
	conn redis.Conn
	opts RedisLockOptions
}

// RedisLock implements the Lock interface for locks in the redis store
type RedisLock struct {
	name   string
	ttl    time.Duration
	client *RedisLockClient
}

// NewRedisLockClient return a new RedisLockClient given the provided RedisLockOptions
func NewRedisLockClient(opts RedisLockOptions) (*RedisLockClient, error) {
	if opts.ClientID == "" {
		opts.ClientID = UUID()
	}
	if opts.Network == "" {
		opts.Network = "tcp"
	}

	if opts.Namespace == "" {
		opts.Namespace = defaultNS
	}

	if opts.DialFunc == nil {
		opts.DialFunc = redis.Dial
	}
	c := RedisLockClient{nil, opts}
	err := c.Reconnect()
	if err != nil {
		return nil, err
	}
	return &c, nil
}

// Clone returns a disconnected copy of the currenct client
func (c *RedisLockClient) Clone() Client {
	return &RedisLockClient{
		opts: c.opts,
		conn: nil,
	}
}

// Close closes the connecton to redis
func (c *RedisLockClient) Close() {
	if c.conn != nil {
		c.conn.Close()
	}
}

// Reconnect reconnects to redis, or connects if not connected
func (c *RedisLockClient) Reconnect() error {
	c.Close()
	conn, err := c.opts.DialFunc(c.opts.Network, c.opts.Address, c.opts.DialOptions...)
	if err != nil {
		return err
	}
	c.conn = conn
	_, err = c.conn.Do("PING")
	if err != nil {
		return err
	}
	return nil
}

// SetID sets the ID for the current client
func (c *RedisLockClient) SetID(id string) {
	c.opts.ClientID = id
}

// ID returns the current client ID
func (c *RedisLockClient) ID() string {
	return c.opts.ClientID
}

func (l *RedisLock) key() string {
	return l.client.opts.Namespace + ":" + l.name
}

// NewLock creates a new Lock. Lock is not automatically acquired.
func (c *RedisLockClient) NewLock(name string) Lock {
	return &RedisLock{
		name:   name,
		ttl:    time.Duration(0),
		client: c,
	}
}

// Acquire acquires the lock for the specified time lentgh (ttl).
// It returns immadiately if the lock cannot be acquired
func (l *RedisLock) Acquire(ttl time.Duration) error {
	if ttl < time.Millisecond {
		return ErrInvalidTTL
	}
	l.ttl = ttl
	ms := int(ttl.Nanoseconds() / int64(time.Millisecond))
	_, err := redis.String(l.client.conn.Do("SET", l.key(), l.client.ID(), "PX", ms, "NX"))
	switch {
	case err == redis.ErrNil:
		return ErrLockHeldByOtherClient
	case err != nil:
		return err
	default:
		return nil
	}
}

// Release releases the lock if owned. Returns an error if the lock is not owned by this client
func (l *RedisLock) Release() error {
	res, err := redis.Bool(releaseScript.Do(l.client.conn, l.key(), l.client.ID()))
	if err != nil {
		return err
	}
	if res == false {
		return ErrLockHeldByOtherClient
	}
	return nil
}

// RefreshTTL Extends the lock, if owned, for the specified TTL.
// ttl argument becomes the new ttl for the lock: successive calls to Refresh()
// will use this ttl
// It returns an error if the lock is not owned by the current client
func (l *RedisLock) RefreshTTL(ttl time.Duration) error {
	l.ttl = ttl
	return l.Refresh()
}

// Refresh extends the lock by extending the TTL in the store.
// It returns an error if the lock is not owned by the current client
func (l *RedisLock) Refresh() error {
	ms := int(l.ttl.Nanoseconds() / int64(time.Millisecond))
	res, err := redis.Bool(refreshScript.Do(l.client.conn, l.key(), l.client.ID(), ms))
	if err != nil {
		return err
	}
	if res == false {
		return ErrLockNotOwned
	}
	return nil
}

// Info returns information about the lock.
func (l *RedisLock) Info() (*LockInfo, error) {
	l.client.conn.Send("GET", l.key())
	l.client.conn.Send("PTTL", l.key())
	l.client.conn.Flush()
	owner, err := redis.String(l.client.conn.Receive())
	if err == redis.ErrNil {
		return &LockInfo{l.name, false, "", time.Duration(0)}, nil
	}
	if err != nil {
		return nil, err
	}
	expire, err := redis.Int(l.client.conn.Receive())
	if err != nil {
		return nil, err
	}

	ttl := time.Duration(expire) * time.Millisecond

	return &LockInfo{
		Name:     l.name,
		Acquired: true,
		Owner:    owner,
		TTL:      ttl,
	}, nil
}
